
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import static java.awt.image.ImageObserver.WIDTH;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.json.JSONException;

/**
 *
 * @author yilingyang, michael, moksh, simon, nathan
 */
public class testMap extends javax.swing.JFrame {

    private testPOIHandler testPOIHandler;
    private String curBuilding;
    private String curFloor;
    private boolean isAdmin;

    private Point mouseOrigin = new Point(0, 0);
    private Point viewOrigin = new Point(0, 0);

    private JTabbedPane tabbedPane;

    /**
     *
     * Initializes the components of the GUI and sets up the test map. Adds
     * pre-defined buildings to the buildings drop-down menu and selects none by
     * default. Initializes a test POI handler. Sets the admin status based on
     * the state of the adminToggle.
     */
    public testMap() {
        initComponents();
        buildings.addItem("Middlesex College");
        buildings.addItem("Alumni Hall");
        buildings.addItem("Health Science Building");
        buildings.setSelectedItem(null);
        testPOIHandler = new testPOIHandler();
        isAdmin = adminToggle.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        leftPanel = new javax.swing.JPanel();
        buildings = new javax.swing.JComboBox<>();
        floors = new javax.swing.JComboBox<>();
        buildingLabel = new javax.swing.JLabel();
        floorLabel = new javax.swing.JLabel();
        washBox = new javax.swing.JCheckBox();
        classBox = new javax.swing.JCheckBox();
        confirm = new javax.swing.JButton();
        adminToggle = new javax.swing.JToggleButton();
        adminPassword = new javax.swing.JPasswordField();
        adminPassLabel = new javax.swing.JLabel();
        labBox = new javax.swing.JCheckBox();
        restBox = new javax.swing.JCheckBox();
        custBox = new javax.swing.JCheckBox();
        favBox = new javax.swing.JCheckBox();
        otherBox = new javax.swing.JCheckBox();
        displayLabel = new javax.swing.JLabel();
        adminPassLabel1 = new javax.swing.JLabel();
        displayListScroll = new javax.swing.JScrollPane();
        displayList = new javax.swing.JList<>();
        adminPassLabel2 = new javax.swing.JLabel();
        searchbar = new javax.swing.JTextField();
        help = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();
        accessBox = new javax.swing.JCheckBox();
        weather = new javax.swing.JButton();
        mapScroll = new javax.swing.JScrollPane();
        mapPanel = new javax.swing.JPanel();
        buildingMap = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buildings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingsActionPerformed(evt);
            }
        });

        floors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floorsActionPerformed(evt);
            }
        });

        buildingLabel.setText("Select a Building:");

        floorLabel.setText("Select a Floor:");

        washBox.setSelected(true);
        washBox.setText("Washrooms");
        washBox.setEnabled(false);
        washBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                washBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                washBoxFocusLost(evt);
            }
        });
        washBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                washBoxActionPerformed(evt);
            }
        });

        classBox.setSelected(true);
        classBox.setText("Classrooms");
        classBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classBoxActionPerformed(evt);
            }
        });

        confirm.setBackground(new java.awt.Color(174, 207, 232));
        confirm.setText("Confirm");
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        adminToggle.setBackground(new java.awt.Color(174, 207, 232));
        adminToggle.setText("Admin Mode");
        adminToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminToggleActionPerformed(evt);
            }
        });

        adminPassword.setText("jPasswordField1");

        adminPassLabel.setText("Enter admin password:");

        labBox.setSelected(true);
        labBox.setText("Labs");
        labBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labBoxActionPerformed(evt);
            }
        });

        restBox.setSelected(true);
        restBox.setText("Restaurants");
        restBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restBoxActionPerformed(evt);
            }
        });

        custBox.setSelected(true);
        custBox.setText("Custom");
        custBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custBoxActionPerformed(evt);
            }
        });

        favBox.setSelected(true);
        favBox.setText("Favorites");
        favBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favBoxActionPerformed(evt);
            }
        });

        otherBox.setSelected(true);
        otherBox.setText("Other");
        otherBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherBoxActionPerformed(evt);
            }
        });

        displayLabel.setText("Display POI (Click confirm):");

        adminPassLabel1.setText("List of POIs:");

        displayListScroll.setViewportView(displayList);

        adminPassLabel2.setText("Search:");

        searchbar.setForeground(new java.awt.Color(204, 204, 204));
        searchbar.setText("Search");

        help.setForeground(new java.awt.Color(248, 0, 0));
        help.setText("Help(?)");
        help.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpMouseClicked(evt);
            }
        });

        exit.setForeground(new java.awt.Color(255, 0, 0));
        exit.setText("Exit");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitMouseClicked(evt);
            }
        });

        accessBox.setSelected(true);
        accessBox.setText("Accessibility");
        accessBox.setEnabled(false);
        accessBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                accessBoxFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                accessBoxFocusLost(evt);
            }
        });
        accessBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessBoxActionPerformed(evt);
            }
        });

        weather.setText("Current Weather");
        weather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(adminPassLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(leftPanelLayout.createSequentialGroup()
                                .addComponent(displayListScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(35, 35, 35)))
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adminPassLabel2)
                            .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weather))
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(adminToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                            .addComponent(adminPassword)
                            .addComponent(floorLabel)
                            .addComponent(buildingLabel)
                            .addComponent(buildings, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(floors, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(confirm)
                            .addComponent(adminPassLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(otherBox)
                            .addComponent(favBox)
                            .addComponent(washBox)
                            .addComponent(classBox)
                            .addComponent(labBox)
                            .addComponent(restBox)
                            .addComponent(custBox)
                            .addComponent(displayLabel)
                            .addComponent(accessBox))
                        .addGap(78, 78, 78))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(help)
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(help, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(buildingLabel)
                        .addGap(1, 1, 1)
                        .addComponent(buildings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(floorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(floors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(confirm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(adminPassLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(adminPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(adminToggle))
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(displayLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accessBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(washBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(restBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(custBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(favBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(otherBox)))
                .addGap(21, 21, 21)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adminPassLabel1)
                    .addComponent(adminPassLabel2))
                .addGap(14, 14, 14)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(displayListScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                        .addGap(21, 21, 21))
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(searchbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(weather)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        mapScroll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapScrollMouseClicked(evt);
            }
        });

        mapPanel.setBackground(new java.awt.Color(255, 255, 255));

        buildingMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buildingMapMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mapPanelLayout.createSequentialGroup()
                .addComponent(buildingMap, javax.swing.GroupLayout.PREFERRED_SIZE, 1406, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 305, Short.MAX_VALUE))
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buildingMap, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );

        mapScroll.setViewportView(mapPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mapScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mapScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * Handles the action performed when a building is selected from the
     * dropdown menu. Sets the available floors for the selected building in the
     * floors dropdown menu. If an exception occurs, prints the error message to
     * the console.
     *
     * @param evt the ActionEvent that triggered the method
     */
    private void buildingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingsActionPerformed
        // TODO add your handling code here:
        try {
            String selectedBuild = buildings.getSelectedItem().toString();
            switch (selectedBuild) {
                case "Middlesex College" -> {
                    floors.removeAllItems();
                    floors.addItem("0");
                    floors.addItem("1");
                    floors.addItem("2");
                    floors.addItem("3");
                    floors.addItem("4");
                    floors.setSelectedItem(null);
                }
                case "Alumni Hall" -> {
                    floors.removeAllItems();
                    floors.addItem("0");
                    floors.addItem("1");
                    floors.addItem("2");
                    floors.setSelectedItem(null);
                }
                case "Health Science Building" -> {
                    floors.removeAllItems();
                    floors.addItem("1");
                    floors.addItem("2");
                    floors.addItem("3");
                    floors.addItem("4");
                    floors.setSelectedItem(null);
                }
                default -> {
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_buildingsActionPerformed

    private void washBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_washBoxActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_washBoxActionPerformed

    private void classBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_classBoxActionPerformed

    private void floorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_floorsActionPerformed

    /**
     *
     * Handles the action when the confirm button is clicked. Updates the map
     * displayed based on the selected building and floor, sets the current
     * building and floor variables, and calls the update() method.
     *
     * @param evt the action event triggered by clicking the confirm button
     */
    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        // TODO add your handling code here:

        try {
            buildingMap.removeAll();
            String building = buildings.getSelectedItem().toString();
            switch (building) {
                case "Middlesex College" ->
                    building = "MC";
                case "Alumni Hall" ->
                    building = "AH";
                case "Health Science Building" ->
                    building = "HSB";
                default -> {
                }
            }
            String floor = floors.getSelectedItem().toString();
            buildingMap.setIcon(new javax.swing.ImageIcon("img/" + building + "/" + floor + ".png"));
            buildingMap.revalidate();

            curBuilding = building;
            curFloor = floor;

            update();

        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_confirmActionPerformed

    /**
     *
     * Handles the action of toggling the admin status.
     *
     * @param evt the ActionEvent that triggered this method
     */
    private void adminToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminToggleActionPerformed
        // TODO add your handling code here:

        if (adminToggle.isSelected()) {
            String password = adminPassword.getText();
            if (password.equals("")) {
                JOptionPane.showMessageDialog(null, "Enter admin password");
                adminToggle.setSelected(false);
            } else if (!password.equals("password")) {
                JOptionPane.showMessageDialog(null, "Incorrect password");
                adminToggle.setSelected(false);
            } else {
                isAdmin = true;
            }
        } else {
            isAdmin = false;
        }
    }//GEN-LAST:event_adminToggleActionPerformed

    /**
     *
     * Handles mouse click events on the building map. If the right mouse button
     * is clicked and a building and floor have been selected, a popup menu is
     * displayed allowing the user to create a new POI at the clicked location.
     * The user is prompted to enter information about the new POI, and if valid
     * information is entered, a new POI is added to the POIHandler and
     * displayed on the building map.
     *
     * @param evt the mouse click event that occurred
     */
    private void buildingMapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buildingMapMouseClicked
        // may not need viewPort
        mouseOrigin = new Point(evt.getPoint());
        JViewport viewPort = mapScroll.getViewport();
        if (viewPort != null) {
            viewOrigin = viewPort.getViewPosition();
        }

        if (evt.getButton() == MouseEvent.BUTTON3) {
            if (!(curBuilding == null) && !(curFloor == null)) {
                JPopupMenu popup = new JPopupMenu();
                JMenuItem item = new JMenuItem("Create POI");
                JFrame curMap = this;
                item.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent event) { //if add poi button pressed, open dialogue menu to add poi, wait until finished, then update pane
                        ArrayList<Object> a = new ArrayList<Object>();
                        testAddPOI addPOIDisplay = new testAddPOI(curMap, a);
                        addPOIDisplay.setVisible(true);

                        // If valid new POI confirmed, proceed to add POI
                        if (!a.isEmpty()) {

                            String name = (String) a.get(0);
                            String desc = (String) a.get(1);
                            String type = (String) a.get(2);
                            boolean custom = !isAdmin;
                            boolean fav = (boolean) a.get(3);

                            ImageIcon icon;
                            switch (type) {
                                case "Accessibility" -> {
                                    icon = new ImageIcon(new ImageIcon("img/accessibility.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
                                }
                                case "Classroom" -> {
                                    icon = new ImageIcon(new ImageIcon("img/classroom.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
                                }
                                case "Lab" -> {
                                    icon = new ImageIcon(new ImageIcon("img/lab.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
                                }
                                case "Restaurant" -> {
                                    icon = new ImageIcon(new ImageIcon("img/restaurant.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
                                }
                                case "Washroom" -> {
                                    icon = new ImageIcon(new ImageIcon("img/washroom.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
                                }
                                default -> {
                                    icon = new ImageIcon(new ImageIcon("img/poi.png").getImage().getScaledInstance(20, 30, Image.SCALE_DEFAULT));
                                }
                            }
                            // get the exact placement of the POI icon
                            JLabel img = new JLabel(icon);
                            Dimension dimension = img.getPreferredSize();

                            // Create and add new POI
                     
                            Point coord = new Point(evt.getX() - dimension.width / 2, evt.getY() - dimension.height / 2);
                            testPOI poi = new testPOI(name, coord, curBuilding, curFloor, desc, type, custom, fav);

   
                            testPOIHandler.addPOI(poi);
              
                            for (testPOI POIObj : testPOIHandler.getPOIList()) {
                          
                                if (POIObj.getBuilding().equals(curBuilding) && POIObj.getFloor().equals(curFloor)) {

                                    displayPOI(POIObj);
                                    buildingMap.repaint();
                                    buildingMap.revalidate();

                                }

                            }
                        }

                    }
                });
                popup.add(item);
                popup.show(mapScroll, WIDTH, WIDTH);
                popup.setLocation(evt.getXOnScreen(), evt.getYOnScreen());
            }

        }

    }//GEN-LAST:event_buildingMapMouseClicked

    private void mapScrollMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapScrollMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_mapScrollMouseClicked

    private void labBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_labBoxActionPerformed

    private void restBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_restBoxActionPerformed

    private void custBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_custBoxActionPerformed

    private void favBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_favBoxActionPerformed

    private void otherBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherBoxActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_otherBoxActionPerformed

    /**
     *
     * Handles the action when the help button is clicked. Displays a message
     * dialog with information on how to use the application.
     *
     * @param evt the mouse event that triggered the action
     */
    private void helpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpMouseClicked
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, """
                                            To begin, select a building and floor, then press confirm to view the map. 
                                            To add POIs, right click anywhere on the map and enter the given information. 
                                            Press any POI to view information.
                                            To select or deselect favourite, press POI and select/deselect favourite option.
                                            Custom POIs can be deleted be pressing on the POI and selecting 'Delete POI'
                                            Built-in POIs cannot be edited or deleted unless in admin mode
                                            To enter admin mode, type in 'password' into the password field then select the admin toggle
                                            To exit admin mode, deselect the admin toggle""");
    }//GEN-LAST:event_helpMouseClicked

    /**
     *
     * Handles the user clicking on the "exit" button, causing the program to
     * exit.
     *
     * @param evt the MouseEvent that triggered this event handler
     */
    private void exitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitMouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitMouseClicked

    private void washBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_washBoxFocusGained
        // TODO add your handling code here:

    }

    /**
     * Updates the displayed POIs on the map based on the selected checkboxes
     * for POI type and favourites. Clears the buildingMap panel and displays
     * only the selected POIs based on the current building and floor.
     */
    private void update() {
        buildingMap.removeAll();
        if (washBox.isSelected()) {
            for (testPOI POIObj : testPOIHandler.getPOIList()) {
                if (POIObj.getBuilding().equals(curBuilding) && POIObj.getFloor().equals(curFloor) && POIObj.getType().equals("Washroom")) {
                    displayPOI(POIObj);
                }
            }
        }
        if (otherBox.isSelected()) {
            for (testPOI POIObj : testPOIHandler.getPOIList()) {
                if (POIObj.getBuilding().equals(curBuilding) && POIObj.getFloor().equals(curFloor) && POIObj.getType().equals("Other")) {
                    displayPOI(POIObj);
                }
            }
        }
        if (labBox.isSelected()) {
            for (testPOI POIObj : testPOIHandler.getPOIList()) {
                if (POIObj.getBuilding().equals(curBuilding) && POIObj.getFloor().equals(curFloor) && POIObj.getType().equals("Lab")) {
                    displayPOI(POIObj);
                }
            }
        }
        if (restBox.isSelected()) {
            for (testPOI POIObj : testPOIHandler.getPOIList()) {
                if (POIObj.getBuilding().equals(curBuilding) && POIObj.getFloor().equals(curFloor) && POIObj.getType().equals("Restaurant")) {
                    displayPOI(POIObj);
                }
            }
        }
        if (classBox.isSelected()) {
            for (testPOI POIObj : testPOIHandler.getPOIList()) {
                if (POIObj.getBuilding().equals(curBuilding) && POIObj.getFloor().equals(curFloor) && POIObj.getType().equals("Classroom")) {
                    displayPOI(POIObj);
                }
            }
        }
        if (favBox.isSelected()) {
            for (testPOI POIObj : testPOIHandler.getPOIList()) {
                if (POIObj.getBuilding().equals(curBuilding) && POIObj.getFloor().equals(curFloor) && POIObj.isFavourite() == true) {
                    displayPOI(POIObj);
                }
            }
        }
        if (custBox.isSelected()) {
            for (testPOI POIObj : testPOIHandler.getPOIList()) {
                if (POIObj.getBuilding().equals(curBuilding) && POIObj.getFloor().equals(curFloor) && POIObj.isCustom() == true) {
                    displayPOI(POIObj);
                }
            }
        }
    }//GEN-LAST:event_washBoxFocusGained

    private void washBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_washBoxFocusLost
        // TODO add your handling code here:

    }//GEN-LAST:event_washBoxFocusLost

    private void accessBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_accessBoxFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_accessBoxFocusGained

    private void accessBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_accessBoxFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_accessBoxFocusLost

    private void accessBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accessBoxActionPerformed

    /**
     * Action performed when the weather button is clicked. Creates a new tab
     * for the weather app and adds it to the tabbed pane. If there is an error
     * with the JSON data, prints the stack trace of the exception.
     *
     * @param evt The action event triggered by clicking the weather button.
     */
    private void weatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherActionPerformed
        // When the weather button is clicked, create a new tab for the weather app
        JPanel weatherPanel = new JPanel();
        try {
            weatherPanel.add(new weatherApp());
        } catch (JSONException jsonException) {
            jsonException.printStackTrace();
        }
        tabbedPane.addTab("Weather App", weatherPanel);
        tabbedPane.setSelectedComponent(weatherPanel);
    }//GEN-LAST:event_weatherActionPerformed

    /**
     * Displays the point of interest (POI) on the map.
     *
     * @param POIObj The POI object to be displayed.
     * @return The JLabel representing the POI on the map.
     */
    private JLabel displayPOI(testPOI POIObj) {
        ImageIcon icon;
        switch (POIObj.getType()) {
            case "Accessibility" -> {
                icon = new ImageIcon(new ImageIcon("img/accessibility.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
            }
            case "Classroom" -> {
                icon = new ImageIcon(new ImageIcon("img/classroom.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
            }
            case "Lab" -> {
                icon = new ImageIcon(new ImageIcon("img/lab.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
            }
            case "Restaurant" -> {
                icon = new ImageIcon(new ImageIcon("img/restaurant.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
            }
            case "Washroom" -> {
                icon = new ImageIcon(new ImageIcon("img/washroom.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
            }
            default -> {
                icon = new ImageIcon(new ImageIcon("img/poi.png").getImage().getScaledInstance(20, 30, Image.SCALE_DEFAULT));
            }
        }

        JLabel image = new JLabel(icon);
        image.addMouseListener(new MouseAdapter() {
            @Override
            // if POI is pressed on, highlight POI and open a menu to display POI data and favourite, or delete
            public void mousePressed(MouseEvent e) {
                // Initialize the popup menu

                //Highlight POI by changing icon
                ImageIcon iconHighlight = new ImageIcon(new ImageIcon("img/poiHighlight.png").getImage().getScaledInstance(30, 30, Image.SCALE_DEFAULT));
                image.setIcon(iconHighlight);
                image.setSize(new Dimension(iconHighlight.getIconWidth(), iconHighlight.getIconHeight()));
                buildingMap.repaint();
                buildingMap.revalidate();
                JPopupMenu popup = new JPopupMenu();

                // Add POI name to menu
                JMenuItem menuName = new JMenuItem(POIObj.getName());
                popup.add(menuName);
                // Add POI type to menu
                JMenuItem menuType = new JMenuItem(POIObj.getType());
                popup.add(menuType);
                // Add POI favourite to menu
                JMenuItem menuFav = new JCheckBoxMenuItem("favourite");
                menuFav.setSelected(POIObj.isFavourite());
                // 
                menuFav.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent event) {
                        menuFav.setSelected(!menuFav.isSelected());
                        POIObj.setFavourite(!POIObj.isFavourite());

                    }
                });
                popup.add(menuFav);
                // Add POI description
                JMenuItem menuDesc = new JMenuItem(POIObj.getDescription());
                popup.add(menuDesc);
                // Add POI delete function for admins and custom
                if (isAdmin || POIObj.isCustom()) {
                    JMenuItem menuDelete = new JMenuItem("Delete POI");
                    menuDelete.setForeground(Color.red);
                    menuDelete.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent event) {
                            testPOIHandler.removePOI(POIObj);
                            buildingMap.remove(image);
                            buildingMap.repaint();
                            buildingMap.revalidate();
                        }
                    });
                    popup.add(menuDelete);
                }
                popup.show(buildingMap, WIDTH, WIDTH);
                popup.setLocation(e.getXOnScreen(), e.getYOnScreen());

            }
        });
        // When another area of the map is pressed, unhighlight POI
        buildingMap.addMouseListener(new MouseAdapter() {
            @Override
            // Unhighlight by changing the icon back
            public void mousePressed(MouseEvent e) {
                image.setIcon(icon);
                image.setSize(new Dimension(icon.getIconWidth(), icon.getIconHeight()));
                buildingMap.repaint();
                buildingMap.revalidate();

            }
        });

        Dimension dim = image.getPreferredSize();
        image.setBounds(POIObj.getCoordinate().x, POIObj.getCoordinate().y, dim.width, dim.height);
        buildingMap.add(image);
        return image;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testMap().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox accessBox;
    private javax.swing.JLabel adminPassLabel;
    private javax.swing.JLabel adminPassLabel1;
    private javax.swing.JLabel adminPassLabel2;
    private javax.swing.JPasswordField adminPassword;
    private javax.swing.JToggleButton adminToggle;
    private javax.swing.JLabel buildingLabel;
    private javax.swing.JLabel buildingMap;
    private javax.swing.JComboBox<String> buildings;
    private javax.swing.JCheckBox classBox;
    private javax.swing.JButton confirm;
    private javax.swing.JCheckBox custBox;
    private javax.swing.JLabel displayLabel;
    private javax.swing.JList<String> displayList;
    private javax.swing.JScrollPane displayListScroll;
    private javax.swing.JLabel exit;
    private javax.swing.JCheckBox favBox;
    private javax.swing.JLabel floorLabel;
    private javax.swing.JComboBox<String> floors;
    private javax.swing.JLabel help;
    private javax.swing.JCheckBox labBox;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JScrollPane mapScroll;
    private javax.swing.JCheckBox otherBox;
    private javax.swing.JCheckBox restBox;
    private javax.swing.JTextField searchbar;
    private javax.swing.JCheckBox washBox;
    private javax.swing.JButton weather;
    // End of variables declaration//GEN-END:variables
}
